data[valid_outcome[[2]][valid_outcome[[1]] == outcome]]
complete.cases(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]])
data[valid_outcome[[2]][valid_outcome[[1]] == outcome]]
is.numeric(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]])
as.numeric(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]])
max(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]], na)
?max
max(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]], na.rm = FALSE)
is.na <- 'Not Available'
max(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]], na.rm = FALSE)
max(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]], na.rm = TRUE)
is.na
max(data[as.numeric(valid_outcome[[2]][valid_outcome[[1]] == outcome])], na.rm = TRUE)
max(as.numeric(data[valid_outcome[[2]][valid_outcome[[1]] == outcome]]), na.rm = TRUE)
data
data <- data[order(data[,"Hospital.Name"])]
?order
names(data)
data[order(data),]
head(data[order(data),])
best <- function(state, outcome) {
# state argument indicates the two letter state abbreviation you would like to gather data for
# outcome argument indicates either heart attack, heart failure, or pneumonia
# function returns the hospital name with the best (lowest) 30-day mortality rate
# for the specified outcome in the given state
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
options(warn=-1) # sets R warnings off for NA data
# make sure state entered is valid
if(!(state %in% data$State)) {
stop("invalid state entered")
}
# check that outcome is valid and do appropriate calculations
# found outcome numbers using provided informational PDF
if(outcome == "heart attack") {
findBest(11, state, data)
}
else if (outcome == "heart failure") {
findBest(17, state, data)
}
else if(outcome == "pneumonia") {
findBest(23, state, data)
}
else {
stop("invalid outcome entered")
}
}
# helper function that finds the best hospiral for the given outcome number
findBest <- function(outcomeNumber, state, data) {
data[, outcomeNumber] <- as.numeric(data[, outcomeNumber])
data<-subset(data,data$State==state) # only need info for given state
valMin<-min(data[[outcomeNumber]],na.rm=TRUE) # best in this case = minimum
data<-subset(data,data[[outcomeNumber]]==valMin)
data<-data[order(data[["Hospital.Name"]]),]
return(data[1,"Hospital.Name"]) # return best hospital name
}
best("TX", "pneumonia")
best <- function(state, outcome) {
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
} else if (outcome == "heart attack") {
searchBest(11, state, data)
} else if (outcome == "heart failure") {
searchBest(17, state, data)
} else if (outcome == "pneumonia") {
searchBest(23, state, data)
}
## rate (function)
searchBest <- function(outcomeNumber, state, data) {
data[, outcomeNumber] <- as.numeric(data[, outcomeNumber])
data<-subset(data,data$State==state)
valMin<-min(data[[outcomeNumber]],na.rm=TRUE)
data<-subset(data,data[[outcomeNumber]]==valMin)
data<-data[order(data[["Hospital.Name"]]),]
return(data[1,"Hospital.Name"])
}
}
best("TX", "pneumonia")
best <- function(state, outcome) {
searchBest <- function(outcomeNumber, state, data) {
data[, outcomeNumber] <- as.numeric(data[, outcomeNumber])
data<-subset(data,data$State==state)
valMin<-min(data[[outcomeNumber]],na.rm=TRUE)
data<-subset(data,data[[outcomeNumber]]==valMin)
data<-data[order(data[["Hospital.Name"]]),]
return(data[1,"Hospital.Name"])
}
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
} else if (outcome == "heart attack") {
searchBest(11, state, data)
} else if (outcome == "heart failure") {
searchBest(17, state, data)
} else if (outcome == "pneumonia") {
searchBest(23, state, data)
}
## rate (function)
}
best("TX", "pneumonia")
best <- function(state, outcome) {
options(warn=-1) # sets R warnings off for NA data
searchBest <- function(outcomeNumber, state, data) {
data[, outcomeNumber] <- as.numeric(data[, outcomeNumber])
data<-subset(data,data$State==state)
valMin<-min(data[[outcomeNumber]],na.rm=TRUE)
data<-subset(data,data[[outcomeNumber]]==valMin)
data<-data[order(data[["Hospital.Name"]]),]
return(data[1,"Hospital.Name"])
}
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
} else if (outcome == "heart attack") {
searchBest(11, state, data)
} else if (outcome == "heart failure") {
searchBest(17, state, data)
} else if (outcome == "pneumonia") {
searchBest(23, state, data)
}
## rate (function)
}
best("TX", "pneumonia")
best <- function(state, outcome) {
options(warn = -1) # disable warnings
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
}
## rate
if (outcome == "heart attack") {
searchBest(11, state, data)
} else if (outcome == "heart failure") {
searchBest(17, state, data)
} else if (outcome == "pneumonia") {
searchBest(23, state, data)
}
}
searchBest <- function(outcomeNumber, state, data) {
data[, outcomeNumber] <- as.numeric(data[, outcomeNumber])
data <- subset(data, data$State==state)
valMin <- min(data[[outcomeNumber]], na.rm = TRUE)
data <- subset(data, data[[outcomeNumber]] == valMin)
data <- data[order(data[["Hospital.Name"]]), ]
return(data[1, "Hospital.Name"])
}
best("TX", "pneumonia")
best <- function(state, outcome) {
options(warn = -1) # disable warnings
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
}
## rate
if (outcome == "heart attack") {
searchBest(11, state, data)
} else if (outcome == "heart failure") {
searchBest(17, state, data)
} else if (outcome == "pneumonia") {
searchBest(23, state, data)
}
}
searchBest <- function(outcomeNumber, state, data) {
data[, outcomeNumber] <- as.numeric(data[, outcomeNumber])
data <- subset(data, data$State==state)
valMin <- min(data[[outcomeNumber]], na.rm = TRUE)
data <- subset(data, data[[outcomeNumber]] == valMin)
data <- data[order(data[["Hospital.Name"]]), ]
return(data[1, "Hospital.Name"])
}
best("TX", "pneumonia")
source("best.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
rankhospital <- function(state, outcome, num = "best") {
options(warn = -1) # disable warnings
# we will use this...
source("best.R")
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
if (outcome == "heart attack") {
if (num == "worst"){
return (searchWorst(11, state, data))
}
else {
data[, 11] <- as.numeric(data[, 11])
newData <- subset(data,data[["State"]] == state)
lengthNewData <- length(newData[["State"]])
newData<-newData[order(newData[[11]],newData[["Hospital.Name"]]),]
newData<-subset(newData,subset=(!is.na(newData[[11]])))
}
}
else if (outcome == "heart failure") {
if(num == "worst"){
return(searcWorst(17, state, data))
}
else {
data[, 17] <- as.numeric(data[, 17])
newData <- subset(data, data[["State"]] == state)
lengthNewData <- length(newData[["State"]])
newData <- newData[order(newData[[17]], newData[["Hospital.Name"]]), ]
newData <- subset(newData, subset = (!is.na(newData[[17]])))
}
}
else if (outcome == "pneumonia") {
if(num == "worst"){
return (searchWorst(23, state, data))
}
else {
data[, 23] <- as.numeric(data[, 23])
newData <- subset(data, data[["State"]] == state)
lengthNewData <- length(newData[["State"]])
newData <- newData[order(newData[[23]], newData[["Hospital.Name"]]),]
newData <- subset(newData,subset = (!is.na(newData[[23]])))
}
}
# if num is larger than the number of hospitals in state
if (is.numeric(num) && (num > lengthNewData)) {
return(NA)
}
# if num is "best" than return best
if (!is.numeric(num) && (num == "best")) {
return(best(state,outcome)) # best function defined at best.R
}
if (is.numeric(num)) {
return(newData[num, "Hospital.Name"])
}
}
# helper function that finds the worst hospiral for the given outcome number
searchWorst <- function(outcome, state, data) {
data[, outcome] <- as.numeric(data[, outcome])
data <- subset(data, data$State == state)
valMax <- max(data[[outcome]], na.rm = TRUE)
data <- subset(data,data[[outcome]] == valMax)
data <- data[order(data[["Hospital.Name"]]), ]
return(data[1, "Hospital.Name"])
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- sort(unique(data$State))
state
state <- data$State
state <- sort(unique(state))
state
hospital <- rep("", length(state))
hospital
rankall <- function(outcome, num = "best" ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
}
# set unique states vector
state <- sort(unique(data$State))
hospitalName <- rep("", length(state))
## Return hospital name in that state with lowest 30-day death
for (i in 1:length(state)) {
statedata <- data[data$State == state[i],]
if (outcome == 'heart attack') {
mortality <- as.numeric(statedata[,11])
} else if (outcome == 'heart failure') {
mortality <- as.numeric(statedata[,17])
} else if (outcome == 'pneumonia') {
mortality <- as.numeric(statedata[,23])
}
mortalityRank <- rank(mortality, na.last = NA)
if (num == "best") {
r <- 1
} else if (num == "worst") {
r <- length(mortalityRank)
} else if (num <= length(mortalityRank) ) {
r <- num
} else {
r <- NA
}
if (is.na(r)) {
hospitalName[i] <- NA
} else {
hospitalName[i] <- statedata$hospitalName.Name[order(mortality, statedata$hospitalName.Name)[r]]
}
}
## rate
return(data.frame(hospitalName = hospitalName, state = state))
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = 'best') {
options(warn = -1) # disable warnings
## Read outcome data
data <- read.csv('outcome-of-care-measures.csv', colClasses = 'character')
data[,11] <- suppressWarnings(as.numeric(oc[,11]))
data[,17] <- suppressWarnings(as.numeric(oc[,17]))
data[,23] <- suppressWarnings(as.numeric(oc[,23]))
#create a list of states for verification
states <- sort(unique(data$State))
#make a list of outcomes to check for
conditions <- c('heart attack', 'heart failure', 'pneumonia')
#if (!state %in% states) { stop('invalid state') }
if (!outcome %in% conditions) { stop('invalid outcome') }
#pick a column to select based on the outcome
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
#create a list for the data frame outcomes
hospitals <- c()
#loop through all states
for (i in states) {
#make a subset, just for that state
soc <- oc[grep(i, oc$State, ignore.case=T),]
#get a dataframe, sorted on the outcome, then drop the NAs out
sorted <- soc[order(soc[,selector],soc[,2]),c(1,2,selector)]
sorted <- na.omit(sorted)
#figure out indexes for 'best' and 'worst'
if (num == 'best') { num <- 1 }
if (num == 'worst') { num <- nrow(sorted) }
#return the name of the hospital at that rating
hospitals <- append(hospitals, sorted[num,2])
}
#create output dataframe
data.frame(hospital=hospitals, state=states)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
indices <- c(11, 17, 23)
if (!outcome %in% outcomes) stop("invalid outcome")
data <- read.csv("outcome-of-care-measures.csv")
i <- indices[match(outcome, outcomes)]
hospitals <- data[, c(2, 7, i)]
hospitals[, 3] <- as.numeric(as.character(hospitals[, 3]))
hospitals <- na.omit(hospitals)
names(hospitals) <- c("hospital", "state", "rate")
if (num == "best") {
num <- 1
} else if (num == "worst") {
} else {
num <- as.numeric(num)
if (is.na(num)) {
stop("invalid num")
} else if (num > nrow(hospitals)) {
return(NA)
}
}
results <- NULL
for(state in levels(hospitals$state)) {
hospitals_for_state <- hospitals[hospitals$state == state, ]
if (num == "worst") {
n <- nrow(hospitals_for_state)
} else {
n <- num
}
result <- hospitals_for_state[order(hospitals_for_state$rate, hospitals_for_state$hospital), c(1, 2)][n, ]
result$state <- rep(state, nrow(result))
results <- rbind(results, result)
}
rownames(results) <- NULL
return(results)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
options(warn = -1) # disable warnings
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
indices <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
}
i <- indices[match(outcome, outcomes)]
hospitals <- data[, c(2, 7, i)]
hospitals[, 3] <- as.numeric(as.character(hospitals[, 3]))
hospitals <- na.omit(hospitals)
names(hospitals) <- c("hospital", "state", "rate")
if (num == "best") {
num <- 1
} else if (num == "worst") {
} else {
num <- as.numeric(num)
if (is.na(num)) {
stop("invalid num")
} else if (num > nrow(hospitals)) {
return(NA)
}
}
results <- NULL
## For each state, find the hospital of the given rank
for(state in levels(hospitals$state)) {
hospitals_for_state <- hospitals[hospitals$state == state, ]
if (num == "worst") {
n <- nrow(hospitals_for_state)
} else {
n <- num
}
result <- hospitals_for_state[order(hospitals_for_state$rate, hospitals_for_state$hospital), c(1, 2)][n, ]
result$state <- rep(state, nrow(result))
results <- rbind(results, result)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
rownames(results) <- NULL
return(results)
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
options(warn = -1) # disable warnings
## internal variables
valid_outcome <- list(c("heart attack", "heart failure", "pneumonia"),c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
indices <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (nrow(data[data$State == state,]) == 0) {
stop("invalid state")
} else if (length(valid_outcome[[1]][valid_outcome[[1]] == outcome]) == 0) {
stop("invalid outcome")
}
i <- indices[match(outcome, outcomes)]
hospitals <- data[, c(2, 7, i)]
hospitals[, 3] <- as.numeric(as.character(hospitals[, 3]))
hospitals <- na.omit(hospitals)
names(hospitals) <- c("hospital", "state", "rate")
if (num == "best") {
num <- 1
} else if (num == "worst") {
} else {
num <- as.numeric(num)
if (is.na(num)) {
stop("invalid num")
} else if (num > nrow(hospitals)) {
return(NA)
}
}
results <- NULL
## For each state, find the hospital of the given rank
for(state in levels(hospitals$state)) {
hospitals_for_state <- hospitals[hospitals$state == state, ]
if (num == "worst") {
n <- nrow(hospitals_for_state)
} else {
n <- num
}
result <- hospitals_for_state[order(hospitals_for_state$rate, hospitals_for_state$hospital), c(1, 2)][n, ]
result$state <- rep(state, nrow(result))
results <- rbind(results, result)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
rownames(results) <- NULL
return(results)
}
submit()
submit()
submit()
